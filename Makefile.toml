# Cargo Make configuration for Recognotes project
# Platform-agnostic build automation

[config]
default_to_workspace = false

# Format backend code with rustfmt
[tasks.format-backend]
description = "Format backend code with rustfmt"
cwd = "recognotes-rust-backend"
command = "cargo"
args = ["fmt", "--all"]

# Format GUI code with rustfmt
[tasks.format-gui]
description = "Format GUI code with rustfmt"
cwd = "recognotes-desktop-gui"
command = "cargo"
args = ["fmt", "--all"]

# Format all code
[tasks.format]
description = "Format all code with rustfmt"
dependencies = ["format-backend", "format-gui"]

# Check formatting without modifying
[tasks.format-check-backend]
description = "Check backend code formatting"
cwd = "recognotes-rust-backend"
command = "cargo"
args = ["fmt", "--all", "--", "--check"]

[tasks.format-check-gui]
description = "Check GUI code formatting"
cwd = "recognotes-desktop-gui"
command = "cargo"
args = ["fmt", "--all", "--", "--check"]

[tasks.format-check]
description = "Check code formatting without modifying"
dependencies = ["format-check-backend", "format-check-gui"]

# Build backend in release mode
[tasks.build-backend]
description = "Build backend in release mode"
cwd = "recognotes-rust-backend"
command = "cargo"
args = ["build", "--release"]

# Build GUI in release mode
[tasks.build-gui]
description = "Build GUI in release mode"
cwd = "recognotes-desktop-gui"
command = "cargo"
args = ["build", "--release"]

# Copy backend executable to root
[tasks.copy-backend]
dependencies = ["build-backend"]
command = "cmd"
args = ["/C", "copy", ".\\target\\release\\recognotes-rust-backend.exe", ".\\recognotes-rust-backend.exe"]

# Copy backend executable to root (Linux/Mac)
[tasks.copy-backend-unix]
dependencies = ["build-backend"]
command = "sh"
args = ["-c", "cp ./target/release/recognotes-rust-backend ./recognotes-rust-backend"]

# Copy GUI executable to root
[tasks.copy-gui]
dependencies = ["build-gui"]
command = "cmd"
args = ["/C", "copy", ".\\target\\release\\recognotes-desktop-gui.exe", ".\\recognotes-desktop-gui.exe"]

# Copy GUI executable to root (Linux/Mac)
[tasks.copy-gui-unix]
dependencies = ["build-gui"]
command = "sh"
args = ["-c", "cp ./target/release/recognotes-desktop-gui ./recognotes-desktop-gui"]

# Build and copy both executables (Windows)
[tasks.build-all]
description = "Build both backend and GUI, copy executables to root"
dependencies = ["copy-backend", "copy-gui"]

# Build and copy both executables (Unix)
[tasks.build-all-unix]
description = "Build both backend and GUI, copy executables to root"
dependencies = ["copy-backend-unix", "copy-gui-unix"]

# Default task
[tasks.default]
alias = "build-all"

# Clean all build artifacts
[tasks.clean]
description = "Clean all build artifacts"
dependencies = ["clean-backend", "clean-gui"]

[tasks.clean-backend]
description = "Clean backend artifacts"
cwd = "recognotes-rust-backend"
command = "cargo"
args = ["clean"]

[tasks.clean-gui]
description = "Clean GUI artifacts"
cwd = "recognotes-desktop-gui"
command = "cargo"
args = ["clean"]

# Check both projects
[tasks.check]
description = "Fast check of both projects"
dependencies = ["check-backend", "check-gui"]

[tasks.check-backend]
description = "Check backend"
cwd = "recognotes-rust-backend"
command = "cargo"
args = ["check"]

[tasks.check-gui]
description = "Check GUI"
cwd = "recognotes-desktop-gui"
command = "cargo"
args = ["check"]

# Clippy with aggressive settings
[tasks.clippy]
description = "Run clippy with aggressive settings on both projects"
dependencies = ["clippy-backend", "clippy-gui"]

[tasks.clippy-backend]
description = "Run clippy on backend"
cwd = "recognotes-rust-backend"
command = "cargo"
args = ["clippy", "--", "-D", "warnings", "-W", "clippy::pedantic", "-W", "clippy::nursery"]

[tasks.clippy-gui]
description = "Run clippy on GUI"
cwd = "recognotes-desktop-gui"
command = "cargo"
args = ["clippy", "--", "-D", "warnings", "-W", "clippy::pedantic", "-W", "clippy::nursery"]
